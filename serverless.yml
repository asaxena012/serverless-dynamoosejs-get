service: serverless-dynamoosejs

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-south-1
  environment:
    USERS_TABLE_NAME:
      Ref: UsersTable
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            # - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            # - dynamodb:UpdateItem
            # - dynamodb:DeleteItem
          Resource: 
            - "Fn::GetAtt": [UsersTable, Arn]

layers:
  dynamoose:
    path: layers
    description: dynamoose dependency layer for nodejs
    compatibleRuntimes:
      - nodejs8.10

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: dateJoined
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: DateJoinedIndex
            KeySchema:
              - AttributeName: dateJoined
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST

functions:
  fetchUserDetails:
    handler: src/app.lambda_handler
    memorySize: 128
    runtime: nodejs18.x
    layers:
      - !Ref DynamooseLambdaLayer
    events:
      - http:
          path: /service/v1/user/{id}
          method: get
          documentation:
            summary: "Get user details"
            description: "Get user details based on userId" 
      - http:
          path: /service/v1/user
          method: get
          documentation:
            summary: "Get users"
            description: "Get users based on joining date" 

custom:
  stage: ${opt:stage, self:provider.stage}
  usersTable: ${self:custom.stage}-usersTable